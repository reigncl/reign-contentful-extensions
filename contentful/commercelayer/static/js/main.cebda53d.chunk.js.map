{"version":3,"sources":["logo.svg","dataTransformer.js","index.js"],"names":["dataTransformer","projectUrl","product","id","image","get","name","sku","externalLink","DIALOG_ID","accessToken","makeCTA","fieldType","validateParameters","parameters","clientId","length","clientSecret","apiEndpoint","startsWith","async","getAccessToken","endpoint","CLayerAuth","getIntegrationToken","fetchProductPreviews","skus","config","resultPromises","chunk","map","URL","skusSubset","res","fetch","headers","Accept","Authorization","method","json","results","Promise","all","foundProducts","flatMap","data","missingProducts","difference","isMissing","setup","logo","description","color","parameterDefinitions","type","required","renderDialog","sdk","container","document","getElementById","style","display","flexDirection","renderSkuPicker","fetchProducts","search","pagination","result","installationParams","validationError","Error","offset","fetchSKUs","installation","count","limit","total","meta","record_count","products","window","startAutoResizer","openDialog","currentValue","dialogs","openCurrentApp","allowHeightOverflow","position","title","field","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","width","Array","isArray","isDisabled"],"mappings":"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","file":"static/js/main.cebda53d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.73d2f416.svg\";","import get from 'lodash/get';\n\n/**\n * Transforms the API response of CommerceLayer into\n * the product schema expected by the SkuPicker component\n */\nexport const dataTransformer = (projectUrl) => (product) => {\n  const { id } = product;\n  const image = get(product, ['imageUrl']) || get(product, ['attributes', 'image_url']);\n  const name = get(product, ['name']) || get(product, ['attributes', 'name']);\n  const sku = get(product, ['code']) || get(product, ['attributes', 'code']);\n  return {\n    id,\n    image,\n    name,\n    sku,\n    externalLink: `${projectUrl}/admin/skus/${id}/edit`,\n  };\n};\n","import CLayerAuth from '@commercelayer/js-auth';\nimport difference from 'lodash/difference';\nimport chunk from 'lodash/chunk';\nimport flatMap from 'lodash/flatMap';\n\nimport { setup, renderSkuPicker } from '@contentful/ecommerce-app-base';\n\nimport logo from './logo.svg';\nimport { dataTransformer } from './dataTransformer';\n\nconst DIALOG_ID = 'root';\nconst PER_PAGE = 20;\n\nlet accessToken = null;\n\nfunction makeCTA(fieldType) {\n  return fieldType === 'Array' ? 'Select products' : 'Select a product';\n}\n\nfunction validateParameters(parameters) {\n  if (parameters.clientId.length < 1) {\n    return 'Provide your application client ID.';\n  }\n\n  if (parameters.clientSecret.length < 1) {\n    return 'Provide your application client secret.';\n  }\n\n  if (parameters.apiEndpoint.length < 1 || !parameters.apiEndpoint.startsWith('https://')) {\n    return 'Provide a valid application Base endpoint.';\n  }\n\n  return null;\n}\n\nasync function getAccessToken(clientId, endpoint, clientSecret) {\n  if (!accessToken) {\n    /* eslint-disable-next-line require-atomic-updates */\n    accessToken = (\n      await CLayerAuth.getIntegrationToken({\n        clientId,\n        endpoint: endpoint.startsWith('https://') ? endpoint : `https://${endpoint}`,\n        clientSecret,\n      })\n    ).accessToken;\n  }\n  return accessToken;\n}\n\n/**\n * This function is needed to make the pagination of Commerce Layer work with the\n * @contentful/ecommerce-app-base library.\n *\n * When fetching the SKUs via the Commerce Layer JS SDK the metadata object which\n * includes the total count of records needed by the shared-sku-picker paginator\n * is missing. But it is there when fetching the SKUs via a plain HTTP req.\n */\nasync function fetchSKUs(installationParams, search, pagination) {\n  const validationError = validateParameters(installationParams);\n  if (validationError) {\n    throw new Error(validationError);\n  }\n\n  const { clientId, apiEndpoint, clientSecret } = installationParams;\n  const accessToken = await getAccessToken(clientId, apiEndpoint, clientSecret);\n\n  const URL = `${apiEndpoint}/api/skus?page[size]=${PER_PAGE}&page[number]=${\n    pagination.offset / PER_PAGE + 1\n  }${search.length ? `&filter[q][name_or_code_cont]=${search}` : ''}`;\n\n  const res = await fetch(URL, {\n    headers: {\n      Accept: 'application/vnd.api+json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    method: 'GET',\n  });\n\n  return await res.json();\n}\n\n/**\n * Fetches the product previews for the products selected by the user.\n */\nconst fetchProductPreviews = async function fetchProductPreviews(skus, config) {\n  if (!skus.length) {\n    return [];\n  }\n\n  const PREVIEWS_PER_PAGE = 25;\n\n  const { clientId, apiEndpoint, clientSecret } = config;\n  const accessToken = await getAccessToken(clientId, apiEndpoint, clientSecret);\n\n  // Commerce Layer's API automatically paginated results for collection endpoints.\n  // Here we account for the edge case where the user has picked more than 25\n  // products, which is the max amount of pagination results. We need to fetch\n  // and compile the complete selection result doing 1 request per 25 items.\n  const resultPromises = chunk(skus, PREVIEWS_PER_PAGE).map(async (skusSubset) => {\n    const URL = `${apiEndpoint}/api/skus?page[size]=${PREVIEWS_PER_PAGE}&filter[q][code_in]=${skusSubset}`;\n    const res = await fetch(URL, {\n      headers: {\n        Accept: 'application/vnd.api+json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      method: 'GET',\n    });\n    return await res.json();\n  });\n\n  const results = await Promise.all(resultPromises);\n\n  const foundProducts = flatMap(results, ({ data }) =>\n    data.map(dataTransformer(config.apiEndpoint))\n  );\n\n  const missingProducts = difference(\n    skus,\n    foundProducts.map((product) => product.sku)\n  ).map((sku) => ({ sku, isMissing: true, image: '', name: '', id: '' }));\n\n  return [...foundProducts, ...missingProducts];\n};\n\nasync function renderDialog(sdk) {\n  const container = document.getElementById(DIALOG_ID);\n  container.style.display = 'flex';\n  container.style.flexDirection = 'column';\n\n  renderSkuPicker(DIALOG_ID, {\n    sdk,\n    fetchProductPreviews,\n    fetchProducts: async (search, pagination) => {\n      const result = await fetchSKUs(sdk.parameters.installation, search, pagination);\n\n      return {\n        pagination: {\n          count: PER_PAGE,\n          limit: PER_PAGE,\n          total: result.meta.record_count,\n          offset: pagination.offset,\n        },\n        products: result.data.map(dataTransformer(sdk.parameters.installation.apiEndpoint)),\n      };\n    },\n  });\n\n  sdk.window.startAutoResizer();\n}\n\nasync function openDialog(sdk, currentValue, config) {\n  const skus = await sdk.dialogs.openCurrentApp({\n    allowHeightOverflow: true,\n    position: 'center',\n    title: makeCTA(sdk.field.type),\n    shouldCloseOnOverlayClick: true,\n    shouldCloseOnEscapePress: true,\n    parameters: config,\n    width: 1400,\n  });\n\n  return Array.isArray(skus) ? skus : [];\n}\n\nfunction isDisabled(/* currentValue, config */) {\n  // No restrictions need to be imposed as to when the field is disabled from the app's side\n  return false;\n}\n\nsetup({\n  makeCTA,\n  name: 'Commerce Layer',\n  logo,\n  description:\n    'The Commerce Layer app allows editors to select products from their Commerce Layer account and reference them inside of Contentful entries.',\n  color: '#212F3F',\n  parameterDefinitions: [\n    {\n      id: 'clientId',\n      name: 'Client ID',\n      description: 'The client ID of your application',\n      type: 'Symbol',\n      required: true,\n    },\n    {\n      id: 'clientSecret',\n      name: 'Client Secret',\n      description: 'The client secret of your application',\n      type: 'Symbol',\n      required: true,\n    },\n    {\n      id: 'apiEndpoint',\n      name: 'API Endpoint',\n      description: 'Application Base endpoint (e.g., \"https://acme.commercelayer.io\")',\n      type: 'Symbol',\n      required: true,\n    },\n  ],\n  fetchProductPreviews,\n  renderDialog,\n  openDialog,\n  isDisabled,\n  validateParameters,\n});\n"],"sourceRoot":""}